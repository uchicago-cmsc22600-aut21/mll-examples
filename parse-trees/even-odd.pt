(Prog (BindFun intToString ((PatVar i))
               (ExpIf (ExpBin (ExpVar i) < (ExpInt 0))
                      (ExpBin (ExpStr "-") ^ (ExpApp (ExpVar intToString) (ExpUn unary - (ExpVar i))))
                      (ExpIf (ExpBin (ExpVar i) == (ExpInt 0)) (ExpStr "0")
                             (ExpIf (ExpBin (ExpVar i) == (ExpInt 1)) (ExpStr "1")
                                    (ExpIf (ExpBin (ExpVar i) == (ExpInt 2)) (ExpStr "2")
                                           (ExpIf (ExpBin (ExpVar i) == (ExpInt 3)) (ExpStr "3")
                                                  (ExpIf (ExpBin (ExpVar i) == (ExpInt 4)) (ExpStr "4")
                                                         (ExpIf (ExpBin (ExpVar i) == (ExpInt 5)) (ExpStr "5")
                                                                (ExpIf (ExpBin (ExpVar i) == (ExpInt 6)) (ExpStr "6")
                                                                       (ExpIf (ExpBin (ExpVar i) == (ExpInt 7))
                                                                              (ExpStr "7")
                                                                              (ExpIf (ExpBin (ExpVar i) == (ExpInt 8))
                                                                                     (ExpStr "8")
                                                                                     (ExpIf (ExpBin (ExpVar i) ==
                                                                                                    (ExpInt 9))
                                                                                            (ExpStr "9")
                                                                                            (ExpBin (ExpApp (ExpVar intToString)
                                                                                                            (ExpBin (ExpVar i)
                                                                                                                    /
                                                                                                                    (ExpInt 10)))
                                                                                                    ^
                                                                                                    (ExpApp (ExpVar intToString)
                                                                                                            (ExpBin (ExpVar i)
                                                                                                                    %
                                                                                                                    (ExpInt 10))))))))))))))))
      (BindFun boolToString ((PatVar b)) (ExpIf (ExpVar b) (ExpStr "True") (ExpStr "False")))
      (BindVal (PatVar zero) (ExpInt 0)) (BindVal (PatVar one) (ExpInt 1))
      (BindFun preEven ((PatVar odd) (PatVar x))
               (ExpIf (ExpBin (ExpVar x) < (ExpVar zero))
                      (ExpApp (ExpApp (ExpVar preEven) (ExpVar odd)) (ExpUn unary - (ExpVar x)))
                      (ExpIf (ExpBin (ExpVar x) == (ExpInt 0)) (ExpCon True)
                             (ExpApp (ExpVar odd) (ExpBin (ExpVar x) - (ExpVar one))))))
      (BindFun odd ((PatVar x))
               (ExpIf (ExpBin (ExpVar x) < (ExpVar zero)) (ExpApp (ExpVar odd) (ExpUn unary - (ExpVar x)))
                      (ExpIf (ExpBin (ExpVar x) == (ExpInt 0)) (ExpCon False)
                             (ExpApp (ExpApp (ExpVar preEven) (ExpVar odd)) (ExpBin (ExpVar x) - (ExpVar one))))))
      (BindVal (PatVar even) (ExpApp (ExpVar preEven) (ExpVar odd))) (BindVal (PatVar n) (ExpInt 101))
      (BindVal (PatVar even_n) (ExpApp (ExpVar even) (ExpVar n))) (BindExp (ExpApp (ExpVar print) (ExpStr "even ")))
      (BindExp (ExpApp (ExpVar print) (ExpApp (ExpVar intToString) (ExpVar n))))
      (BindExp (ExpApp (ExpVar print) (ExpStr " = ")))
      (BindExp (ExpApp (ExpVar print) (ExpApp (ExpVar boolToString) (ExpVar even_n))))
      (BindExp (ExpApp (ExpVar print) (ExpStr "\n"))) (ExpTuple))
